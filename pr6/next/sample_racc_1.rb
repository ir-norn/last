#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Calc < Racc::Parser

module_eval(<<'...end sample_racc_1.racc/module_eval...', 'sample_racc_1.racc', 41)
  def parse(str)
    p str
    @tokens = str.split(/([zv\[\]\(\)\+\-\*\/])/)
    @tokens.delete" "
    @tokens.map!{|m| m.strip }
    p @tokens
#        exit

    do_parse
  end

  def next_token
    token = @tokens.shift
#    p token
    case token
    when /^\d+\z/
      return [:NUM, token.to_i]
    when /\s/
      p "space_err"
      return [:NUM , 10 ]
    when nil
      return nil
    else
      return [token, nil]
    end
  end
...end sample_racc_1.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     3,     9,    10,     3,     3,     9,    10,     4,     4,
     5,     5,     4,     4,     5,     5,     3,     3,    14,   nil,
     3,     3,   nil,   nil,     4,     4,     5,     5,     4,     4,
     5,     5,     9,    10,     7,     8,    11,   nil,     6,   nil,
   nil,    21,     9,    10,     7,     8,    11,     9,    10,     7,
     8,    11,   nil,   nil,    20,     9,    10,     7,     8 ]

racc_action_check = [
     0,    11,    15,    15,     4,     5,    16,    16,     0,    11,
     0,    11,     4,     5,     4,     5,    10,     7,     6,   nil,
     8,     9,   nil,   nil,    10,     7,    10,     7,     8,     9,
     8,     9,    13,    13,    13,    13,    13,   nil,     1,   nil,
   nil,    13,     1,     1,     1,     1,     1,    12,    12,    12,
    12,    12,   nil,   nil,    12,    19,    19,    19,    19 ]

racc_action_pointer = [
    -2,    38,   nil,   nil,     2,     3,    18,    15,    18,    19,
    14,    -1,    43,    28,   nil,    -2,     2,   nil,   nil,    51,
   nil,   nil ]

racc_action_default = [
   -10,   -10,    -6,    -7,   -10,   -10,   -10,   -10,   -10,   -10,
   -10,   -10,   -10,   -10,    22,    -1,    -2,    -3,    -4,    -5,
    -8,    -9 ]

racc_goto_table = [
     1,   nil,   nil,   nil,    12,    13,   nil,    15,    16,    17,
    18,    19 ]

racc_goto_check = [
     1,   nil,   nil,   nil,     1,     1,   nil,     1,     1,     1,
     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil ]

racc_goto_default = [
   nil,   nil,     2 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 15, :_reduce_1,
  3, 15, :_reduce_2,
  3, 15, :_reduce_3,
  3, 15, :_reduce_4,
  3, 15, :_reduce_5,
  1, 15, :_reduce_6,
  1, 16, :_reduce_7,
  3, 16, :_reduce_8,
  3, 16, :_reduce_9 ]

racc_reduce_n = 10

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  :NUM => 2,
  :UMINUS => 3,
  "*" => 4,
  "/" => 5,
  "+" => 6,
  "-" => 7,
  "v" => 8,
  "z" => 9,
  "[" => 10,
  "]" => 11,
  "(" => 12,
  ")" => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUM",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"v\"",
  "\"z\"",
  "\"[\"",
  "\"]\"",
  "\"(\"",
  "\")\"",
  "$start",
  "expr",
  "prim" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sample_racc_1.racc', 12)
  def _reduce_1(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_racc_1.racc', 13)
  def _reduce_2(val, _values, result)
     result = val[0] - val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_racc_1.racc', 14)
  def _reduce_3(val, _values, result)
     result = val[0] * val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_racc_1.racc', 15)
  def _reduce_4(val, _values, result)
     result = val[0] / val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_racc_1.racc', 16)
  def _reduce_5(val, _values, result)
     result = val[0] ** val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_racc_1.racc', 18)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_racc_1.racc', 28)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_racc_1.racc', 29)
  def _reduce_8(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_racc_1.racc', 30)
  def _reduce_9(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Calc
